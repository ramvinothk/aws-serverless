service: serverless-poc

package:
  exclude:
    - .idea/**
    - .serverless/**

provider:
  name: aws
  runtime: nodejs14.x
  profile: demo
  region: ${self:custom.region}
  environment:
    user_pool_id: { Ref: CognitoUserPool }
    client_id: { Ref: CognitoUserPoolClient }
    dynamodb_table: ${self:service}-${self:custom.defaultStage}
    s3_bucket: sls-bucket-poc-01
    sqs: serverless-poc-sqs
    sns: !Ref 'MySNSTopic'
  iamRoleStatements:
    - Effect: Allow
      Action:
        - cognito-idp:AdminInitiateAuth
        - cognito-idp:AdminCreateUser
        - cognito-idp:AdminSetUserPassword
      Resource: "*"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${self:custom.region}:*:table/${self:provider.environment.dynamodb_table}"
    - Effect: Allow
      Action:
        - sns:Publish
      Resource: "*"
    - Effect: Allow
      Action:
        - s3:*
      Resource:
        - { "Fn::Join": [ "", [ "arn:aws:s3:::", { "Ref": "ServerlessDeploymentBucket" } ] ] }
        - "arn:aws:s3:::sls-bucket/*"
    - Effect: "Allow"
      Action:
        - "sqs:GetQueueUrl"
        - "sqs:ListQueues"
      Resource: "*"

custom:
  defaultStage: dev
  currentStage: ${opt:stage, self:custom.defaultStage}
  userPoolName: test-user-pool-${self:custom.currentStage}
  userPoolClientName: test-user-pool-client-${self:custom.currentStage}
  region: us-west-1


#Lambda Functions
functions:
  loginUser:
    handler: user/login.handler
    events:
      - http:
          path: user/login
          method: post
          cors: true
  signupUser:
    handler: user/signup.handler
    events:
      - http:
          path: user/signup
          method: post
          cors: true

  create:
    handler: controller/create.handler
    events:
      - http:
          path: /controller
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: Authorizer

  list:
    handler: controller/list.handler
    events:
      - http:
          path: /controller
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: Authorizer
  get:
    handler: controller/get.handler
    events:
      - http:
          path: /controller/{id}
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: Authorizer

  update:
    handler: controller/update.handler
    events:
      - http:
          path: /controller/{id}
          method: put
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: Authorizer

  delete:
    handler: controller/delete.handler
    events:
      - http:
          path: /controller/{id}
          method: delete
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: Authorizer

  eventNotification:
    handler: controller/listeners.handler
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - SlsDynamoDbTable
              - StreamArn
          batchSize: 5
      - s3:
          bucket: ${self:provider.environment.s3_bucket}
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploads/
            - suffix: .jpg
          existing: true
      - sqs:
          arn:
            Fn::GetAtt:
              - Queues
              - Arn
# AWS Resource Creation
resources:
  Resources:
    CognitoUserPool: ${file(./resources/cognitoUserPool.yml):CognitoUserPool}
    CognitoUserPoolClient: ${file(./resources/cognitoClient.yml):CognitoUserPoolClient}
    Authorizer: ${file(./resources/authorizer.yml):Authorizer}
    SlsDynamoDbTable: ${file(./resources/dynamoDB.yml):SlsDynamoDbTable}
    SlsS3Bucket: ${file(./resources/s3.yml):SlsS3Bucket}
    Queues: ${file(./resources/sqs.yml):Queues}
    MySNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        Subscription:
          - Endpoint: ram16vinoth@gmail.com
            Protocol: "email"
        TopicName: "SampleTopic"
  # outputs
#  Outputs:
#    CognitoUserPoolArn:
#      Value:
#        Fn::GetAtt:
#          - CognitoUserPool
#          - Arn
#      Export:
#        Name: CognitoUserPoolArn-${self:custom.currentStage}
